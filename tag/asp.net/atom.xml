<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
   	<title>RealJenius.com - Tag: asp.net</title>
   
   <link>http://realjenius.com</link>
   <description>I'm a software developer in the game industry, and have been (for better or worse) coding on the Java platform for the last decade. I also do all my own stunts.</description>
   <language>en-us</language>
   <managingEditor>R.J. Lorimer</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
  <title>Deploying Web+Database Apps to Iron Foundry Without Changing Configuration Settings</title>
  <link>http://realjenius.com/2012/07/23/web_database_configuration_settings/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-07-23T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2012/07/23/web_database_configuration_settings/</guid>
  <description><![CDATA[
     One of the tricky things you’ll experience when working with PaaS platforms is that the local development environment won’t exactly mirror the targeted PaaS environment. While some cloud providers do a good job of having a local simulated fabric that closely mimics the cloud environment, it’s inevitable that SOME differences will exist.

In this post, I want to specifically focus on database connection strings. A connection string with “server=localhost” may be perfectly fine when running on a developer’s machine, but this won’t fly when we deploy an application elsewhere. In this example, I’ll show you how we can easily keep a local database connection string while leveraging the built-in connection string rewrite that’s baked into Iron Foundry.

I’ve got a ridiculously simple ASP.NET web form, and within it, a GridView that used a SqlDataSource to grab records from a database on my machine.

[caption id="attachment_77" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=77" rel="attachment wp-att-77"><img class="size-full wp-image-77" title="connstrings01" src="/img/blog/connstrings01.png" alt="Configuration File Markup" width="450" height="234" /></a> Configuration File Markup[/caption]

This application’s web.config file had a connection string (named “Default”) that included the details necessary to talk to the database.

[caption id="attachment_78" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=78" rel="attachment wp-att-78"><img class="size-full wp-image-78" title="connstrings02" src="/img/blog/connstrings02.png" alt="Default Connection String" width="450" height="138" /></a> Default Connection String[/caption]

With this robust website ready to go, I first published the site to the file system, and then spun up the Cloud Foundry Explorer tool.

[caption id="attachment_79" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=79" rel="attachment wp-att-79"><img class="size-full wp-image-79" title="connstrings03" src="/img/blog/connstrings03.png" alt="Cloud Foundry Explorer" width="450" height="166" /></a> Cloud Foundry Explorer[/caption]

I then chose which Iron Foundry environment to target with my “push.” In this case, I chose a Web Fabric instance hosted by Tier 3. During the push, I was asked to select the name of the application, code source location, resource needs, and which application services to bind to. I chose a Microsoft SQL Server application service.

[caption id="attachment_80" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=80" rel="attachment wp-att-80"><img class="size-full wp-image-80" title="connstrings04" src="/img/blog/connstrings04.png" alt="Push Application" width="450" height="347" /></a> Push Application[/caption]

In a few seconds, the application was deployed, and I could see it was up and running. All that remained was to get my local database provisioned into the cloud. Recall that Microsoft SQL Server is just one of many services available in Iron Foundry.

[caption id="attachment_81" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=81" rel="attachment wp-att-81"><img class="size-full wp-image-81" title="connstrings05" src="/img/blog/connstrings05.png" alt="Checking Services via the Iron Foundry VMC" width="450" height="415" /></a> Checking Services via the Iron Foundry VMC[/caption]

While I’ve previously demonstrated some funky ways to instantiate the underlying database in an Iron Foundry environment, we’ve since made it MUCH easier to tunnel into these databases. We now use the Cloud Foundry Caldecott process to connect to the Iron Foundry / Web Fabric SQL Server database service. With a simple command (“vmc tunnel SeroterSqlDb”) I connected my machine to the hosted environment and when the tunnel was set up, vmc returned my database credentials.

[caption id="attachment_82" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=82" rel="attachment wp-att-82"><img class="size-full wp-image-82" title="connstrings06" src="/img/blog/connstrings06.png" alt="Tunneling" width="450" height="521" /></a> Tunneling[/caption]

I could now fire up SQL Management Studio and log into the database with these credentials.

[caption id="attachment_83" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=83" rel="attachment wp-att-83"><img class="size-full wp-image-83" title="connstrings07" src="/img/blog/connstrings071.png" alt="SQL Server Management Studio (2008 R2)" width="450" height="324" /></a> SQL Server Management Studio (2008 R2)[/caption]

After generating a T-SQL script out of the local database, I ran that script against the cloud database and produced the necessary tables.

[caption id="attachment_84" align="aligncenter" width="277"]<a href="http://blog.ironfoundry.org/?attachment_id=84" rel="attachment wp-att-84"><img class="size-full wp-image-84" title="connstrings08" src="/img/blog/connstrings08.png" alt="Databases" width="277" height="413" /></a> Databases[/caption]

You may recall that the application’s original connection string targeted my local database. How did I update it with these new cloud database settings? The answer is: I didn’t have to! When we push a web application to Iron Foundry, and it is associated with an application service like SQL Server, the provisioning process injects the new database connection details into the web.config file of the web application. We can prove this by first finding our application in the Cloud Foundry Explorer.

[caption id="attachment_85" align="aligncenter" width="320"]<a href="http://blog.ironfoundry.org/?attachment_id=85" rel="attachment wp-att-85"><img class="size-full wp-image-85" title="connstrings09" src="/img/blog/connstrings09.png" alt="Databases Listed in Cloud Foundry Explorer" width="320" height="377" /></a> Databases Listed in Cloud Foundry Explorer[/caption]

When I double-clicked the web.config file, I could see that a series of “app settings” were added, and, the “Default” connection string was overwritten with the details of the cloud database. Note that the connection strong had to be named “Default” for this to work!

[caption id="attachment_86" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=86" rel="attachment wp-att-86"><img class="size-full wp-image-86" title="connstrings10" src="/img/blog/connstrings10.png" alt="Configuration" width="450" height="263" /></a> Configuration[/caption]

Sure enough, when we visit the application deployed to Tier 3’s Web Fabric, we can see that it correctly connects to the database and retrieves a set of records.

[caption id="attachment_87" align="aligncenter" width="450"]<a href="http://blog.ironfoundry.org/?attachment_id=87" rel="attachment wp-att-87"><img class="size-full wp-image-87" title="connstrings11" src="/img/blog/connstrings11.png" alt="Viewing the Site" width="450" height="193" /></a> Viewing the Site[/caption]

This is just one way that we’ve tried to make it easier to build your applications locally and confidently deploy them to an Iron Foundry cloud without requiring error-prone connection string synchronization tasks!

  ]]></description>
</item>

	<item>
  <title>Stackato 2.0 integrates Iron Foundry!</title>
  <link>http://realjenius.com/2012/07/10/stackato-2-0-integrates-iron-foundry/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-07-10T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2012/07/10/stackato-2-0-integrates-iron-foundry/</guid>
  <description><![CDATA[
     Today <a href="http://www.activestate.com/" target="_blank">ActiveState</a> released a new version of their Stackato PaaS built on Cloud Foundry. In this new version they've done a spectacular job integrating the Iron Foundry code into the solution, just add a Windows DEA and you're set.

Diane Mueller (<a href="https://twitter.com/pythondj" target="_blank">@pythondj</a>) put together a deep dive using the new <a href="http://www.activestate.com/stackato" target="_blank">Stackato Release</a> with .NET Support, check out "<a href="http://www.activestate.com/blog/2012/07/how-deploy-net-apps-stackato-20" target="_blank">How to Deploy .NET Apps to Stackato 2.0</a>". You no longer need to take the steps <a href="http://blog.ironfoundry.org/2012/03/ironfoundry-and-stackato/" target="_blank">previously written about</a>, instead the integration is now basically plug and play. Stay tuned for more information about this and further Iron Foundry integration work. We've got some good material coming your way.

So check out the release and pick up a copy to test out now. For this release we've been testing with our existing <a href="http://ironfoundry.org/" target="_blank">Iron Foundry DEA VMs</a>, which are available in two formats: <a href="http://www.ironfoundry.org/download" target="_blank">VMware VMX</a> &amp; <a href="http://www.ironfoundry.org/download" target="_blank">OVF Format</a>.

Let's take a quick tour of Stackato with Iron Foundry. When you boot up the Stackato VM you'll be able to navigate to the Stackato Admin site.

[caption id="attachment_68" align="aligncenter" width="1024"]<a href="http://blog.ironfoundry.org/2012/07/stackato-2-0-integrates-iron-foundry/stackato-setup-01/" rel="attachment wp-att-68"><img class="size-large wp-image-68" title="Stackato Setup" src="/img/blog/Stackato-Setup-01-1024x377.jpg" alt="Stackato Setup" width="1024" height="377" /></a> Stackato Setup[/caption]

Once launched login with your account and you'll be brought tot the Overview screen. One of the beauties of the Stackato Deploy is this administration interface that they've built at ActiveState. It really eases the way to get a high level overview of what is going on in your PaaS Environment.

[caption id="attachment_69" align="aligncenter" width="1024"]<a href="http://blog.ironfoundry.org/2012/07/stackato-2-0-integrates-iron-foundry/running-stackato-w-iron-foundry-02/" rel="attachment wp-att-69"><img class="size-large wp-image-69" title="The left hand side default logged in display." src="/img/blog/Running-Stackato-w-Iron-Foundry-02-1024x654.jpg" alt="The left hand side default logged in display." width="1024" height="654" /></a> The left hand side default logged in display.[/caption]

When an Iron Foundry DEA VM is added ASP.NET shows up on the runtimes list (awesome!)

[caption id="attachment_71" align="aligncenter" width="1024"]<a href="http://www.activestate.com/blog/2012/07/how-deploy-net-apps-stackato-20" rel="attachment wp-att-71"><img class="size-large wp-image-71 " title="ASP.NET 4.0 Available in Stackato UI" src="/img/blog/Running-Stackato-w-Iron-Foundry-03-1024x594.jpg" alt="ASP.NET 4.0 Available in Stackato UI" width="1024" height="594" /></a> ASP.NET 4.0 Available in Stackato UI[/caption]

At this point you can deploy a .NET application alongside any other application you have in your <a href="http://www.activestate.com/stackato" target="_blank">Stackato PaaS</a> Environment using Iron Foundry.

If you have any feedback for Stackato or how Iron Foundry Project should be integrated in or other ideas please <a href="http://help.ironfoundry.org/tickets/new" target="_blank">let us know</a>.

  ]]></description>
</item>

</channel>
</rss>