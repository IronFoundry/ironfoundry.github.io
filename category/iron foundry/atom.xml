<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
    <title>RealJenius.com - Category: iron foundry</title>
   
   <link>http://realjenius.com</link>
   <description>I'm a software developer in the game industry, and have been (for better or worse) coding on the Java platform for the last decade. I also do all my own stunts.</description>
   <language>en-us</language>
   <managingEditor>R.J. Lorimer</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
  <title>Thor v2 is underway, with Thor.NET close behind</title>
  <link>http://realjenius.com/2013/08/29/thor-v2-is-underway-with-thor-dotnet-close-behind/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2013-08-29T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2013/08/29/thor-v2-is-underway-with-thor-dotnet-close-behind/</guid>
  <description><![CDATA[
     <p>We’ve heard a great, positive response to the <a href="http://www.ironfoundry.org/2013/08/10/manage-cloud-foundry-from-osx-with-thor/" target="_blank">release of Thor</a>, and we’ve started work on Thor v2 which will be compliant with Cloud Foundry v2 environments. We’re also getting going on Thor.NET so that Windows developers can also get in on the Cloud Foundry fun.</p>




<p>For Thor v2, we’re going to update the user flow to better reflect the structural changes in Cloud Foundry v2. Specifically, we want to represent the <a href="http://docs.cloudfoundry.com/docs/using/managing-apps/orgs-and-spaces.html" target="_blank">Organizations and Spaces</a> in Thor, and make it easy to assign users to roles in both. You’ll be able to add references to multiple clouds, list the spaces in an organization, view the applications within a space, and view the details for a given app. Some of our first UI sketches show off this model.</p>




<p><img src="/img/blog/2013-08-23-1_org_space_app_view-sml.png" /></p>




<p>Adding users and assigning them to roles will be simple.</p>




<p><img src="/img/blog/2013-08-23-3_org_users-sml.png" /></p>




<p>We’ve already begun doing the formal mockups for the Thor UI (that will look the same for both Thor and Thor.NET) and will be diving into core development shortly.</p>




<p><img src="/img/blog/2013-08-29_space_overview.png" /></p>




<p>We’d love to have you contribute to either project! The Thor v2 for OSX project is <a href="https://github.com/IronFoundry/Thor" target="_blank">here on GitHub</a>. The Thor.NET project has a <a href="https://github.com/IronFoundry/Thor.NET" target="_blank">basic skeleton in GitHub</a> and we’ll be rolling on that shortly. Questions? Feature ideas? Throw something into the <a href="https://groups.google.com/forum/#!forum/ironfoundry" target="_blank">Iron Foundry forums</a>.</p>


  ]]></description>
</item>

	<item>
  <title>Manage Cloud Foundry from OSX with Thor</title>
  <link>http://realjenius.com/2013/08/10/manage-cloud-foundry-from-osx-with-thor/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2013-08-10T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2013/08/10/manage-cloud-foundry-from-osx-with-thor/</guid>
  <description><![CDATA[
     <p>We're excited to announce that a stable release of the OSS Thor client is ready to go! Thor is a OSX client tool for managing <strong>ANY</strong> Cloud Foundry v1 environment. You can <a href="https://github.com/IronFoundry/Thor" target="_blank">view (and contribute!) to the source code</a>, or download a ready-to-use, <a href="http://app.ironfoundry.me/download/get/28745936-f900-e211-9f38-00505696004e" target="_blank">compiled version</a>.</p>

<p>Thor was built to support developers who deploy applications to Cloud Foundry. With Thor you can:</p>

<ul>
	<li><strong>Add target clouds. </strong>Point to any Cloud Foundry v1-compliant endpoint to begin managing applications. 

<img title="Thor2" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor2" src="/img/blog/2013_08_09-Thor2.png" width="400" height="200" /> </li>

	<li><strong>View target cloud statistics, deployments. </strong>For any target cloud, you can see the number of running applications, memory consumption, and storage used. You can also see each deployed application and available services. 

<br /><img title="Thor4" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor4" src="/img/blog/2013_08_09-Thor4.png" width="400" height="318" /> </li>

	<li><strong>Add applications. </strong>Reference applications that reside on your machine and push them to multiple clouds. 

<br /><img title="Thor5" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor5" src="/img/blog/2013_08_09-Thor5.png" width="400" height="318" /> </li>

	<li><strong>Deploy and update applications. </strong>For each local application added to Thor, you can choose which cloud to publish it to. 

<br /><img title="Thor7" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor7" src="/img/blog/2013_08_09-Thor7.png" width="400" height="205" /> </li>

	<li><strong>Create services. </strong>Create instances of Cloud Foundry services (e.g. MySQL, Redis, RabbitMQ) to associate with your application. 

<br /><img title="Thor10" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor10" src="/img/blog/2013_08_09-Thor10.png" width="400" height="252" /> </li>

	<li><strong>Bind services to applications. </strong>Create a linkage between a given service and application. 

<br /><img title="Thor12" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor12" src="/img/blog/2013_08_09-Thor12.png" width="400" height="252" /> </li>

	<li><strong>Manage running applications. </strong>You can start, restart, or stop a given application, see its usage statistics, and change its resource application. 

<br /><img title="Thor13" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Thor13" src="/img/blog/2013_08_09-Thor13.png" width="400" height="318" /> </li>
</ul>

<p>What's next? The Iron Foundry team is already hard at work on Thor v2 which will be compliant with new Cloud Foundry v2 environments. We’ll also be shipping a version of Thor v2 for Windows developers. Want to be involved? Let us know and start contributing to the fun open source ecosystem of Cloud Foundry tools.</p>

<p>A number of folks were instrumental in planning, building, testing, and packaging this release. Props to team members <a href="https://twitter.com/nathanyoung" target="_blank">Nathan Young</a>, <a href="https://twitter.com/scottdensmore" target="_blank">Scott Densmore</a>, <a href="https://twitter.com/shanturoy" target="_blank">Shantu Roy</a>, <a href="https://twitter.com/adron" target="_blank">Adron Hall</a>, and <a href="https://twitter.com/bvanderveen" target="_blank">Benjamin van der Veen</a>!</p>
  ]]></description>
</item>

	<item>
  <title>Deploy .NET Apps to Cloud Foundry v2 with Iron Foundry</title>
  <link>http://realjenius.com/2013/07/02/deploy-net-apps-to-cloud-foundry-v2-with-iron-foundry/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2013-07-02T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2013/07/02/deploy-net-apps-to-cloud-foundry-v2-with-iron-foundry/</guid>
  <description><![CDATA[
     <p>The Pivotal team recently made a significant upgrade to Cloud Foundry, changing how applications are <a href="http://docs.cloudfoundry.com/docs/running/architecture/" target="_blank">deployed, staged, isolated, and routed</a>. In order to work with this new model, Iron Foundry had to undergo some re-engineering work. <strong>Today, we’re proud to announce an initial release of a Cloud Foundry v2-compliant build of<a href="http://ironfoundry.org/download" target="_blank"> Iron Foundry</a>.</strong></p>

<p>The Iron Foundry team has spent some hard-core engineering time building a quality .NET extension to Cloud Foundry. Specifically, we’ve made the following three major updates:</p>
<ul>
	<li><a href="https://github.com/IronFoundry/dea_ng" target="_blank"><strong>Updated .NET DEA</strong></a>. Unlike the previous version of Iron Foundry which included a .NET port of Ruby DEA code, we now use the base Ruby DEA code that is part of Cloud Foundry. It’s been modified slightly to run on Windows, but by reusing the Ruby code, we can more easily stay in sync with improvements introduced by the Cloud Foundry team.</li>
	<li><a href="https://github.com/IronFoundry/cloudfoundry-buildpack-clr" target="_blank"><strong>.NET Buildpack</strong></a>. Cloud Foundry v2 <a href="http://docs.cloudfoundry.com/docs/using/deploying-apps/buildpacks.html" target="_blank">makes use of buildpacks</a> to package frameworks and runtimes, and the Iron Foundry team has created a CLR buildpack that supports ASP.NET and (soon) standalone apps.</li>
	<li><a href="http://docs.cloudfoundry.com/docs/running/architecture/warden.html" target="_blank"><strong>.NET Warden.</strong></a> The Warden in Cloud Foundry v2 provides application isolation and resource constraints. It takes advantage of native Linux capabilities and is a key part of the Cloud Foundry framework. We’ve created a Windows-oriented Warden that delivers a secure, isolated container for each application instance. This behavior isn’t natural for a Windows environment, so we’ve been creative in our initial design and are using the IIS web server via the hostable web core vs. the “full” IIS experience. However, we’re considering additional techniques for taking advantage of IIS capabilities (such as application pool recycling) that aren’t present in the hostable web core.</li>
</ul>
<p>Cloud Foundry v2 introduced the <strong>cf tool</strong> that replaced the <strong>vmc tool</strong> that was used for Cloud Foundry v1 management. The <a href="http://docs.cloudfoundry.com/docs/using/managing-apps/cf/index.html" target="_blank">cf interface</a> includes an improved set of capabilities for interrogating, deploying, managing, and configuring Cloud Foundry environments and applications. Now with <a href="http://ironfoundry.org/download" target="_blank">Iron Foundry v2</a>, you can  use the cf tool against applications running in the .NET DEA! Push applications, scale up, scale down, and do all the things with .NET applications that you do with any other application running in a Cloud Foundry environment.</p>

<p>What’s next?</p>
<ul>
	<li>Today we’re releasing a complete set of instructions for pulling Iron Foundry v2 from its <a href="https://github.com/IronFoundry" target="_blank">source on GitHub</a> and building a working environment. Read the <a href="https://github.com/IronFoundry/dea_ng/blob/ironfoundry/WINDOWS.md" target="_blank">DEA installation docs here</a>. We’re also providing an installer for the .NET Warden. Check out the <a href="https://github.com/IronFoundry/ironfoundry/blob/master/INSTALL.md" target="_blank">.NET Warden installation docs here</a>. Moving forward, we’re going to be creating a Micro Iron Foundry instance as well as an installer for the new .NET DEA.</li>
	<li>We’re continuing engineering work on the .NET Warden and welcome any contribution from the community! We’re going to continue maturing the isolated, controlled Warden experience on Windows and would love your feedback.</li>
	<li>Any issues you discover with the new DEA <a href="https://github.com/IronFoundry/dea_ng/issues" target="_blank">can be logged here in GitHub</a>. Any general Iron Foundry issues <a href="https://github.com/IronFoundry/ironfoundry/issues" target="_blank">should be logged here</a>.</li>
	<li>The public ironfoundry.me sandbox environment is still running Cloud Foundry v1, but we’ll be offering a v2-compliant environment soon!</li>
</ul>
<p>We’re very excited that those running Cloud Foundry v2 environments can now use the best available .NET extension. Want to jump in and help out? Download the code, make changes, and submit a pull request in GitHub!</p>

  ]]></description>
</item>

	<item>
  <title>Micro Iron Foundry Image Updated and Ready for Use</title>
  <link>http://realjenius.com/2013/02/28/micro-iron-foundry-image-updated-and-ready-for-use/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2013-02-28T00:00:00-08:00</pubDate>
  <guid>http://realjenius.com/2013/02/28/micro-iron-foundry-image-updated-and-ready-for-use/</guid>
  <description><![CDATA[
     <p><a href="http://ironfoundry.org/download" target="_blank">Micro Iron Foundry</a> is a VM image that makes it easy to add the .NET DEA to <a href="https://micro.cloudfoundry.com/" target="_blank">Micro Cloud Foundry</a> development environments. This powerful combination helps developers design their Cloud Foundry solutions locally before pushing to any number of public hosting providers.</p>

<p>Today, we’ve updated the Micro Iron Foundry instance to ensure compatibility with the latest version of Micro Cloud Foundry. Download the VMX or OVF image now and <a href="http://blog.ironfoundry.org/2012/02/iron-foundry-micro-cloud-1-0-0-released/" target="_blank">plug it into your existing Micro Cloud Foundry image</a>. In addition to updating the image to the most recent Cloud Foundry-friendly bits, we’ve also made three other notable changes:</p>
<ul>
	<li><strong>Microsoft .NET 4.5 support.</strong> The latest version of the .NET framework includes a number of cool improvements from Web Sockets support, to better Windows Identity Foundation capabilities, to access to the new ASP.NET Web API. Micro Iron Foundry is running .NET 4.5 and soon you’ll see this support in IronFoundry.ME and other hosting environments.</li>
	<li><strong>DEA compatible with latest ActiveState Stackato. </strong>We’ve ensured that this new Micro Iron Foundry instance works great with the <a href="http://www.activestate.com/stackato/download_vm" target="_blank">very latest Stackato Micro Cloud</a>. See <a href="http://blog.ironfoundry.org/2012/03/ironfoundry-and-stackato/" target="_blank">our previous blog post</a> on how to connect ActiveState’s great product to a Micro Cloud Foundry + Micro Iron Foundry setup.</li>
	<li><strong>Standard vmc gem works against Iron Foundry applications. </strong>You no longer need to use the vmc-IronFoundry gem in order to push .NET applications to your Iron Foundry DEA in Micro Iron Foundry. Note that you still need this gem when pushing applications to IronFoundry.ME and other Iron Foundry hosting environments.</li>
</ul>

<p>Check it out and let us know if you have any problems!</p>
  ]]></description>
</item>

	<item>
  <title>New Support for Developers Using Visual Studio 2012</title>
  <link>http://realjenius.com/2013/01/09/new-support-for-developers-using-visual-studio-2012/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2013-01-09T00:00:00-08:00</pubDate>
  <guid>http://realjenius.com/2013/01/09/new-support-for-developers-using-visual-studio-2012/</guid>
  <description><![CDATA[
     <p>Iron Foundry developers are likely to use a whole host of different IDEs to build and deploy applications. For those building .NET applications, Visual Studio is likely the development environment of choice. Iron Foundry developers can now push and manage apps directly from Visual Studio 2012 using the <a href="http://ironfoundry.org/download" target="_blank">upgraded Visual Studio Extension</a>.</p>

<p>Now, from either Visual Studio 2010 or Visual Studio 2010, developers can push .NET 4.0 apps to any Iron Foundry-compliant endpoint.</p>

<p><img class="alignnone size-full wp-image-213" title="Vs2012Plugin_01" src="/img/blog/Vs2012Plugin_01.png" alt="" width="600" height="336" /></p>

<p>ASP.NET web applications (or WCF services) can be deployed or redeployed from this tool,. In addition, developers can see all the applications deployed to a given Iron Foundry cloud, and even change resource allocations for a given application.</p>

<p><img class="alignnone size-full wp-image-214" title="Vs2012Plugin_02" src="/img/blog/Vs2012Plugin_02.png" alt="" width="600" height="258" /></p>

<p>Feel free to go <a href="http://ironfoundry.org/download" target="_blank">download this latest Visual Studio extension</a> today!</p>

  ]]></description>
</item>

	<item>
  <title>Building Iron Foundry Apps that Leverage Windows Azure ACS for User Authentication</title>
  <link>http://realjenius.com/2012/11/08/building-iron-foundry-apps-that-leverage-windows-azure-acs-for-user-authentication/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-11-08T00:00:00-08:00</pubDate>
  <guid>http://realjenius.com/2012/11/08/building-iron-foundry-apps-that-leverage-windows-azure-acs-for-user-authentication/</guid>
  <description><![CDATA[
     <p>Iron Foundry and other PaaS frameworks are built to deliver a set of services to developers for building applications. While we think Iron Foundry has a great set of web, data and messaging services available, it by no means includes everything that a developer can use to craft a cool web app. Ideally, a developer can mix and match services from multiple PaaS providers in order to get everything that’s needed to solve a particular problem. For instance, what if an Iron Foundry developer wants to build a .NET application that lets users log in with credentials from a trusted provider? In this blog post, <strong>I’ll show you how to do user authentication/authorization in an Iron Foundry ASP.NET app by using the Windows Azure Access Control Service (ACS)</strong>.</p>

<h3>What is Windows Azure ACS?</h3>
<p><a href="http://msdn.microsoft.com/library/gg429786.aspx" target="_blank">Windows Azure ACS</a> is essential a claims transformation engine that connects to trusted web identity providers (e.g. Facebook, Google, Windows Live, Yahoo) and custom identity providers (e.g. through Active Directory Federation Services), and authenticates the user before passing along a set of claims to your web application. It provides developers a way to outsource the identity management part of their application. ACS itself doesn’t store credentials or act as an identity provider, but rather, it acts as a middleman that can take a series of input claims (e.g. “Google username”, “Windows logon ID”) and transform them into a single claim (“user ID”) used by your app. It’s a cool way to get your application out of the business of handling unique identity providers or storing credentials.</p>

<p>Let’s walk through the steps to building a simple, secure web app that we can deploy to Iron Foundry.</p>
<h3>Step 1 - Create new ASP.NET MVC 4 (internet) application</h3>
<p>To get started, I built a new ASP.NET MVC application in Visual Studio 2012.</p>

<img title="2012-11-07-compapp01" src="/img/blog/2012-11-07-compapp01.png" alt="2012-11-07-compapp01" width="600" height="543" border="0" />

<p>Once the project was created from the MVC4 template, I simply built it and ran it. You can see the default website and notice that I can register for an account. At this point, what this does is store my credentials in the default membership provider (which is a local database). I don’t want that as my long term solution. I want to let users log in with their web identity provider of choice.</p>

<img title="2012-11-07-compapp02" src="/img/blog/2012-11-07-compapp02.png" alt="2012-11-07-compapp02" width="500" height="281" border="0" />

<h3>2. Configure Access Control Service to Recognize Our Iron Foundry Application</h3>
<p>Virtually every Windows Azure service has migrated from the clunky Silverlight portal to the new, clean HTML portal. Unfortunately, Windows Azure ACS still lives in the old portal. Once I regretfully logged into it, I saw the options to add/configure identity providers, set up the relying party applications (like the one I created), and define the claims transformation rules.</p>

<img title="2012-11-07-compapp08" src="/img/blog/2012-11-07-compapp08.png" alt="2012-11-07-compapp08" width="500" height="403" border="0" />

<p>If I wanted to add ADFS as a valid identity provider, I could do that here. Instead, since I used existing web identity providers, I could jump right to the “relying party applications” section. On the first part of this form, I set the friendly name of the application, and the URL that will receive the claims. Initially (until I deployed to Iron Foundry) this was a local address on my machine.</p>

<img title="2012-11-07-compapp09" src="/img/blog/2012-11-07-compapp09.png" alt="2012-11-07-compapp09" width="450" height="437" border="0" />

<p>Further down this form, I was asked which (configured) identity providers I wished to use, whether or not to create a new set of claims transformation rules, and what certificate to use for signing the tokens.</p>

<img title="2012-11-07-compapp10" src="/img/blog/2012-11-07-compapp10.png" alt="2012-11-07-compapp10" width="300" height="323" border="0" />

<p>After saving my relying party entry, I jumped to the “Rule Groups” section of this portal to configure the transformation rules. I chose the option to “generate rules” for all the available identity providers, and was left with a series of “passthrough” rules that take whatever claim value was issued by the identity provider and ships it, as is, to my application.</p>

<img title="2012-11-07-compapp11" src="/img/blog/2012-11-07-compapp11.png" alt="2012-11-07-compapp11" width="350" height="440" border="0" />

<p>An individual one of these rules, such as the “Google name” one, has an input claim type and value, and an output claim type and value. While the one below has the same type and passthrough value, you can imagine how you might have three different providers with different input claim types/values all map to a single, internally-defined claim type and/or value.</p>

<img title="2012-11-07-compapp12" src="/img/blog/2012-11-07-compapp12.png" alt="2012-11-07-compapp12" width="450" height="490" border="0" />

<h3>3. Configure ASP.NET App to use ACS for Identity Management</h3>
<p>With my ACS configuration complete (for now), I returned to Visual Studio 2012 to make it “ACS aware.” Now there is a great new tool for Visual Studio 2012 and the latest Windows Identification Foundation bits (which you can see by grabbing the <a href="http://visualstudiogallery.msdn.microsoft.com/e21bf653-dfe1-4d81-b3d3-795cb104066e" target="_blank">Identity and Access Tools</a>), but since Iron Foundry doesn’t yet support .NET 4.5, I wasn’t able to use the wizard tooling. The latest WIF only applies to .NET 4.5, so I jumped back to using WIF 3.5. To easily grab this version, simply add the NuGet package for <strong>Windows Identification Foundation</strong> to a project.</p>

<img title="2012-11-07-compapp22" src="/img/blog/2012-11-07-compapp22.png" alt="2012-11-07-compapp22" width="450" height="257" border="0" />

<p>With all the proper assemblies in place, I then manually updated my web.config file to reflect my use of WIF and ACS. You can find my complete web.config file below. To learn more about the significance of each section, I’d recommend the blog post <a href="http://blogs.msdn.com/b/alikl/archive/2010/10/06/windows-identity-foundation-wif-configuration-sections-in-asp-net-web-config.aspx" target="_blank">Windows Identity Foundation (WIF) Configuration Sections in ASP.NET Web.Config</a>.</p>
<script src="https://gist.github.com/4040128.js"> </script>

<p>That’s about it. Clearly if I wanted to customize the handling of these claims (e.g. show the value of a claim besides “name” on the home page), there’s additional work I’d want to do in my code. When I ran this application, I was quickly prompted for credentials and the ACS site served up a page for me to select which identity provider to use.</p>

<img title="2012-11-07-compapp14" src="/img/blog/2012-11-07-compapp14.png" alt="2012-11-07-compapp14" width="450" height="340" border="0" />

<p>When I chose the Google provider, I was redirected to the Google accounts page and asked to log in.</p>

<img title="2012-11-07-compapp15" src="/img/blog/2012-11-07-compapp15.png" alt="2012-11-07-compapp15" width="450" height="262" border="0" />

<p>Once I logged into my account, I was returned to my custom web app which recognized that I was now authenticated!</p>

<img title="2012-11-07-compapp16" src="/img/blog/2012-11-07-compapp16.png" alt="2012-11-07-compapp16" width="450" height="396" border="0" />

<p>To prove that this is an account that wasn’t managed by my application itself, I clicked on my name to “manage” my user. I was presented a message indicating that there’s no local password for this user, as the identity provider was NOT my local membership provider.</p>

<img title="2012-11-07-compapp17" src="/img/blog/2012-11-07-compapp17.png" alt="2012-11-07-compapp17" width="450" height="219" border="0" />

<h3>4. Update and Deploy the App to Iron Foundry Environment</h3>
<p>The final task was to update the ASP.NET application and ACS configurations before deploying the application to Iron Foundry. First, I returned to the Windows Azure ACS portal to change the “realm” of the relying party entry that I created for my custom application. I planned on deploying this application to the <a href="http://ironfoundry.org/signup" target="_blank">free IronFoundry.me</a> environment, so I entered the expected destination of the application.</p>

<img title="2012-11-07-compapp18" src="/img/blog/2012-11-07-compapp18.png" alt="2012-11-07-compapp18" width="450" height="350" border="0" />

<p>After saving this change, I returned to my Visual Studio project and entered that same IronFoundry.me URL into the web.config file where the “localhost” value had been before. After publishing the website to the file system and executing a Cloud Foundry <strong>vmc push</strong> command from my Command console, my app was quickly deployed.</p>

<img title="2012-11-07-compapp20" src="/img/blog/2012-11-07-compapp20.png" alt="2012-11-07-compapp20" width="500" height="253" border="0" />

<p>Did it work? I browsed my newly published app on Iron Foundry, and just as with the local site, I was prompted for which identity provider to use. After selecting Google and plugging in my credentials, I saw my logged in user on the website.</p>

<img title="2012-11-07-compapp21" src="/img/blog/2012-11-07-compapp21.png" alt="2012-11-07-compapp21" width="500" height="489" border="0" />

<p>Cool! This is a fun case of being able to use the public/private Iron Foundry PaaS but still take advantage of other useful services offered by other PaaS solutions.</p>
  ]]></description>
</item>

	<item>
  <title>Windows 8 & RT Discussions, Thor, Thor .NET and vcap-client Status Updates</title>
  <link>http://realjenius.com/2012/10/30/thor-thor-net-and-vcap-client-status-updates/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-30T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2012/10/30/thor-thor-net-and-vcap-client-status-updates/</guid>
  <description><![CDATA[
     A few updates from the teams:
<h2>Thor</h2>
<p>Thor is moving along with implementation of services starting yesterday (Monday). You can view our live <a href="http://huboard.com/IronFoundry/Thor/board" target="_blank">Huboard Kanban</a> to see what is currently being worked on. The interface in the last few weeks has gotten a faster, cleaner appearance and stabilized even more around deploying and maintaining your Cloud Foundry based environments.</p>

<p><a href="http://www.ironfoundry.org/"><img src="http://adronhall.smugmug.com/Software/Software-Development/Thor/i-fQFJCBP/0/S/square-S.png" alt="" width="180" height="180" /></a></p>
<p>If you're an XCode user and familiar with Git, check out the <a href="https://github.com/IronFoundry/Thor/blob/master/README.md" target="_blank">README.md</a> to pull down the latest code and try it out yourself against your own Cloud Foundry Projects - private or public hosted!</p>

<h2>Thor .NET for Windows Users</h2>
<p>The Windows version of the Thor Client is about to go into beta in the coming weeks. It has an elegant metro style interface and will initially be available for Windows 7.</p>

<p>For the WinRT and Windows 8 versions we're still determining what the best approach is to development of this version of the UI. We'd love any additional input on the WinRT or Windows 8 Applications or how you see you may use the application on WinRT or Windows 8. Let us know in the <a href="https://groups.google.com/forum/?fromgroups=#!topic/ironfoundry/bJJucnSx1Vc" target="_blank">Iron Foundry Discussion Group</a>.</p>
<h2>vcap-client on Nuget</h2>
<p>Recently we released the <a href="https://github.com/IronFoundry/vcap-client" target="_blank">vcap-client library</a> for client usage against any <a href="http://www.cloudfoundry.org" target="_blank">Cloud Foundry</a> and <a href="http://ironfoundry.org" target="_blank">Iron Foundry</a> Built Environments. So if you're a use of the .NET Framework, this library has all the functionality wrapped up in a <a href="http://www.nuget.org/packages/IronFoundry-VcapClient" target="_blank">Nuget Package</a> for you.</p>

<p>So if you're a user of <a href="http://www.appfog.com" target="_blank">AppFog</a>, <a href="http://cloudfoundry.com" target="_blank">CloudFoundry.com</a>, <a href="http://www.tier3.com/services/fabric" target="_blank">Tier 3 Web Fabric</a>, <a href="http://www.activestate.com/stackato" target="_blank">Stackato</a> or another Cloud Foundry enabled environment and write code against the .NET Framework, this is a <a href="http://www.nuget.org/packages/IronFoundry-VcapClient" target="_blank">great library</a> to try out.</p>
<h2>Conversations Around Iron Foundry Library</h2>
<p>We're currently having conversations via the <a href="https://groups.google.com/forum/?fromgroups#!forum/ironfoundry" target="_blank">Iron Foundry Discussion Group</a> for implementing <a href="https://groups.google.com/forum/?fromgroups=#!topic/ironfoundry/qa2c9S88r_o" target="_blank">background services for .NET</a>. Join the conversation if you'd like to contribute, add your suggestions or have any ideas on how this should be implemented.</p>
  ]]></description>
</item>

	<item>
  <title>IronFoundry.ME Environment Now Running Latest Iron Foundry Bits</title>
  <link>http://realjenius.com/2012/10/10/ironfoundry-me-environment-now-running-latest-iron-foundry-bits/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-10T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2012/10/10/ironfoundry-me-environment-now-running-latest-iron-foundry-bits/</guid>
  <description><![CDATA[
     Last weekend, we <a href="http://blog.ironfoundry.org/2012/10/weekend-iron-foundry-work-downtime-window/" target="_blank">did a refresh</a> of the sandbox <a href="http://api.ironfoundry.me/" target="_blank">IronFoundry.ME</a> environment to make sure that it was running the latest Iron Foundry bits. As part of that update, we've enabled and upgraded a few interesting things.

First of all, we added some new services. You can confirm this by using vmc (and don't forget to upgrade your <a href="http://rubygems.org/gems/vmc-IronFoundry" target="_blank">vmc-IronFoundry</a> gem!) and executing a <strong>vmc services</strong> command.

<img class="alignnone size-full wp-image-182" title="upgrade01" src="/img/blog/upgrade01.png" alt="" width="500" height="266" />

You should notice a few things here. First, MongoDB has been upgraded from version 1.8 to 2.0. Also, we're now running PostgreSQL 9.0. You'll also find the new Cloud Foundry blob service available here.

As far as application runtimes go, we upgraded a couple of those too. You can see this by executing <strong>vmc runtimes</strong> against the IronFoundry.ME environment.

<img class="alignnone size-full wp-image-183" title="upgrade02" src="/img/blog/upgrade02.png" alt="" width="500" height="316" />

See that we are running both Java 6 and 7 now. Also, we've upgraded our versions of Node and included support for Node 0.8.2.

Besides upgrading services and runtimes, we also <a href="http://uaa.ironfoundry.me/login" target="_blank">added support</a> for the Cloud Foundry User Account and Authorization Service (UAA). The Cloud Foundry blog has articles that <a href="http://blog.cloudfoundry.org/2012/07/23/uaa-intro/" target="_blank">Introduce the UAA</a>, review the<a href="http://blog.cloudfoundry.org/2012/07/24/high-level-features-of-the-uaa/" target="_blank"> high level features of the UAA</a>,  and <a href="http://blog.cloudfoundry.org/2012/10/09/oauth-rest/" target="_blank">secure REST web services with the UAA</a>. You'll also find docs on Github that outline the <a href="https://github.com/cloudfoundry/uaa/blob/master/docs/UAA-Security.md" target="_blank">features and configurations</a>, as well as <a href="https://github.com/cloudfoundry/uaa/blob/master/docs/UAA-APIs.rst" target="_blank">how to use the UAA APIs</a>. Keep an eye out for an upcoming blog post that shows an example of how you use the UAA service within Iron Foundry.

We hope that you can immediately take advantage of the new capabilities in this free IronFoundry.ME environment.

  ]]></description>
</item>

	<item>
  <title>Iron Foundry vcap-client (AKA The .NET Cloud Foundry vcap-client)</title>
  <link>http://realjenius.com/2012/10/03/iron-foundry-vcap-client-aka-the-net-cloud-foundry-vcap-client/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-03T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2012/10/03/iron-foundry-vcap-client-aka-the-net-cloud-foundry-vcap-client/</guid>
  <description><![CDATA[
     <a href="http://www.nuget.org/packages/IronFoundry-VcapClient" rel="attachment wp-att-177"><img class="size-full wp-image-177 alignright" src="/img/blog/nuget_35366349.png" alt="" width="229" height="64" /></a>Ever want to write code against the Cloud Foundry API but you don't want to go to the trouble of wrapping up the API calls with library? Well, have no fear there's no need to! With dilligent work from the Iron Foundry team, a few suggestions from outside, and a few contributions from the community we've pulled this together for you. Here's a step by step of what we've accomplished in the last week to bring a solid, clean and tested library to you.

Presenting the Iron Foundry vcap-client. This library provides all of the capabilities wrapped up in the standard Cloud Foundry vcap-client libraries, except for .NET. Not only did we build out this library to provide a programmatic way for .NET Developers to access and manage Cloud Foundry and Iron Foundry environments, we've also provided a Nuget Package for the easiest of access.

With the <a href="http://www.nuget.org/packages/IronFoundry-VcapClient" target="_blank">Iron Foundry Nuget Package</a> it will handle all of your dependencies. We only have two in the package, but it is always nice to have those just handled for you.

If you'd like to contribute, find any issues let us know, or just want to download the project directly check out our <a href="https://github.com/IronFoundry/vcap-client" target="_blank">Iron Foundry vcap-client Github Repo</a>.

  ]]></description>
</item>

	<item>
  <title>Managing PostgreSQL and MySQL Application Instances in Iron Foundry</title>
  <link>http://realjenius.com/2012/09/26/administering-postgresql-and-mysql-application-instances-in-iron-foundry/</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-09-26T00:00:00-07:00</pubDate>
  <guid>http://realjenius.com/2012/09/26/administering-postgresql-and-mysql-application-instances-in-iron-foundry/</guid>
  <description><![CDATA[
     One reasonable concern with PaaS platforms is whether or not developers can easily access and administer backend application services. Iron Foundry database services such as PostgreSQL and MySQL have very strong management tools that you don't want to abandon when working with a PaaS instance. In this post, we'll look at how to wire up existing database management tools to PostgreSQL and MySQL.
<h2>PostgreSQL</h2>
PostgreSQL (discussed in this <a href="http://blog.ironfoundry.org/2012/08/choosing-the-right-database-option-for-your-iron-foundry-applications/" target="_blank">previous Iron Foundry blog post</a>), is a very popular open source database. Developers or database administrators typically use the <a href="http://www.pgadmin.org/" target="_blank">pgAdmin tool</a> to author and debug <a href="http://www.pgadmin.org/docs/1.16/query.html" target="_blank">queries</a>, perform database <a href="http://www.pgadmin.org/docs/1.16/backup.html" target="_blank">backups</a>/<a href="http://www.pgadmin.org/docs/1.16/restore.html" target="_blank">restorations</a>, <a href="http://www.pgadmin.org/docs/1.16/maintenance.html" target="_blank">reindex and cleanup (VACUUM) data</a>,  manage <a href="http://www.pgadmin.org/docs/1.16/pgagent-jobs.html" target="_blank">server jobs</a>, and much more.

You can download the pgAdmin tool <a href="http://www.pgadmin.org/download/" target="_blank">directly</a>, or find it included in the <a href="http://www.enterprisedb.com/products-services-training/pgdownload" target="_blank">PostgreSQL package</a> itself. For this demonstration, I installed PostgreSQL locally and got the pgAdmin tool along with it. After installing the database software, I opened a command prompt on my Windows machine and targeted my Iron Foundry environment.

<img class="alignnone size-full wp-image-152" title="dbadmin01" src="/img/blog/dbadmin01.png" alt="" width="450" height="289" />

After authenticating myself, I issued a vmc command ("<strong>vmc services</strong>") to see which application services were available, and which services I had already provisioned.

<img class="alignnone size-full wp-image-153" title="dbadmin02" src="/img/blog/dbadmin02.png" alt="" width="450" height="242" />

So far, no application services were provisioned. Let's change that. I created a new PostgreSQL instance by issuing the vmc command <strong>vmc create-service postgresql</strong>. Note that I didn't need to bind it to an application and can simply create a standalone instance that could be used by many Iron Foundry web applications.

<img class="alignnone size-full wp-image-154" title="dbadmin03" src="/img/blog/dbadmin03.png" alt="" width="450" height="303" />

Now there was a running instance of PostgreSQL in my environment. At this stage, there was no way for the pgAdmin tool to access this instance. However, thanks to the Cloud Foundry <a href="http://blog.ironfoundry.org/2012/04/caldecott-with-ms-sql-server/" target="_blank">Caldecott</a> technology, I could create a secure tunnel for pgAdmin. The <strong>vmc tunnel &lt;instance name&gt;</strong> command opens up a port that pgAdmin can use to administer that database server.

<img class="alignnone size-full wp-image-155" title="dbadmin04" src="/img/blog/dbadmin04.png" alt="" width="450" height="284" />

I could have chosen to use the psql client which would have let me issue commands right here in the command prompt, but since I wanted to use the full-featured pgAdmin tool, I selected the "none" client. Notice that I got four key pieces of information back: username, password, name and port. Together, these data points will get us logged into our environment.

I opened the pgAdmin tool and could see that the only server currently recognized was the one on my local machine.

<img class="alignnone size-full wp-image-156" title="dbadmin05" src="/img/blog/dbadmin05.png" alt="" width="450" height="330" />

I clicked the "Add a connection to a server" and was shown the "New Server Registration" prompt. For the "Name" value, I used the "name" that came back from the tunnel command; for "Host" value I set it to "localhost"; for the "Port" I used "10000"; and for the Username and Password, I used the corresponding values returned by the tunnel command.

<img class="alignnone size-full wp-image-157" title="dbadmin06" src="/img/blog/dbadmin06.png" alt="" width="450" height="470" />

Once connected, I could navigate all the database artifacts and browse the standard options for backing up data, querying tables, and creating new tables.

<img class="alignnone size-full wp-image-158" title="dbadmin07" src="/img/blog/dbadmin07.png" alt="" width="450" height="330" />

The pgAdmin tool is a very handy and useful way to manage your database artifacts and Iron Foundry makes it easy to use this tool against your application services.
<h2>MySQL</h2>
MySQL is also a very popular open source database and we want to make sure that database developers and administrators can use familiar tooling even if their application instance sits in a PaaS like Iron Foundry.

The MySQL team has made significant investments in their Workbench tool, and here we'll see exactly how you hook the Workbench up to an Iron Foundry instance. First, I downloaded the<a href="http://dev.mysql.com/downloads/workbench/5.2.html" target="_blank"> standalone Workbench tool</a>.

Then, I added a new MySQL instance to my Iron Foundry environment by using the <strong>vmc create-service mysql</strong> command.

<img class="alignnone size-full wp-image-159" title="dbadmin08" src="/img/blog/dbadmin08.png" alt="" width="450" height="312" />

Like the PostgreSQL example prior, I created a tunnel so that the MySQL Workbench tool could "see" our Iron Foundry instance. As before, I also chose the "none" client so that I could connect the GUI tool instead of issuing command statements only.

<img class="alignnone size-full wp-image-162" title="dbadmin09" src="/img/blog/dbadmin091.png" alt="" width="450" height="300" />

Notice that I got back database credentials ("username"/"password"), a schema instance name ("name"), and a port number.

I was now ready to connect the MySQL Workbench to my database instance. The Workbench has three core functions: <a href="http://dev.mysql.com/doc/workbench/en/wb-sql-development.html" target="_blank">SQL development</a>, <a href="http://dev.mysql.com/doc/workbench/en/wb-data-modeling.html" target="_blank">data modeling</a>, and <a href="http://dev.mysql.com/doc/workbench/en/wb-server-administration.html" target="_blank">server administration</a>.

<img class="alignnone size-full wp-image-161" title="dbadmin10" src="/img/blog/dbadmin10.png" alt="" width="450" height="328" />

In this example, I created a new pair of tables, and deployed them to the database instance in Iron Foundry. In the Workbench, I clicked the "Create New EER Model" in order to generate a data model. The first thing that I did was right-click the schema name and choose "Edit Schema." On the subsequent window, I changed the default "mydb" name to the the "name" value returned by the vmc tunnel command.

<img class="alignnone size-full wp-image-163" title="dbadmin11" src="/img/blog/dbadmin11.png" alt="" width="450" height="328" />

I then chose to add a new diagram to the model and proceeded to create a pair of new tables, "customer" and "order", and defined a relationship between them.

<img class="alignnone size-full wp-image-164" title="dbadmin12" src="/img/blog/dbadmin12.png" alt="" width="450" height="494" />

With the model complete, I chose the "Forward Engineer" option so that this model could be used to generate the actual tables.

<img class="alignnone size-full wp-image-165" title="dbadmin13" src="/img/blog/dbadmin13.png" alt="" width="450" height="267" />

I was then prompted to create an actual connection to the target database, and this is where the tunnel-provided values came into play. I plugged in the username and password, and set the Hostname value to "localhost" and the Default Schema to the tunnel-provided "name" value.

<img class="alignnone size-full wp-image-166" title="dbadmin14" src="/img/blog/dbadmin14.png" alt="" width="450" height="183" />

I then kept the remaining default options, including the selection of the two tables to forward engineer, and reviewed the pending SQL Script to be executed. After successfully completing the wizard, I could open an instance of the SQL Editor and browse my schema.

<img class="alignnone size-full wp-image-167" title="dbadmin15" src="/img/blog/dbadmin15.png" alt="" width="328" height="568" />

Sure enough my two tables, relationship included, were there.
<h2>Summary</h2>
While one of the key benefits of a PaaS is managed services, it's important to have the option to administer these application services using the powerful,  familiar management tools currently available to users. Both PostgreSQL and MySQL have solid management interfaces and we saw here how you can tunnel into these Iron Foundry database instances  and perform standard operations against your service.

  ]]></description>
</item>

</channel>
</rss>